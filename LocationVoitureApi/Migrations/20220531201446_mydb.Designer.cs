// <auto-generated />
using System;
using LocationVoitureApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LocationVoitureApi.Migrations
{
    [DbContext(typeof(projetContext))]
    [Migration("20220531201446_mydb")]
    partial class mydb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LocationVoitureApi.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("email");

                    b.Property<string>("Nom")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("nom");

                    b.Property<string>("Password")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("password");

                    b.Property<string>("Photo")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("photo");

                    b.HasKey("Id");

                    b.ToTable("admin", "mydb");
                });

            modelBuilder.Entity("LocationVoitureApi.Models.Agence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("adresse");

                    b.Property<string>("Nom")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("nom");

                    b.HasKey("Id");

                    b.ToTable("agence", "mydb");
                });

            modelBuilder.Entity("LocationVoitureApi.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .HasColumnType("text")
                        .HasColumnName("adresse");

                    b.Property<string>("Cin")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("cin");

                    b.Property<string>("Email")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("email");

                    b.Property<string>("Nom")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("nom");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Prenom")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("prenom");

                    b.Property<string>("Telephone")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("telephone");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Cin" }, "client$cin_UNIQUE")
                        .IsUnique();

                    b.ToTable("client", "mydb");
                });

            modelBuilder.Entity("LocationVoitureApi.Models.Employer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Idagence")
                        .HasColumnType("integer")
                        .HasColumnName("idagence");

                    b.Property<string>("Nom")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("nom");

                    b.Property<string>("Password")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("password");

                    b.Property<string>("Photo")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("photo");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Idagence" }, "fk_employeur_agence1_idx");

                    b.ToTable("employeur", "mydb");
                });

            modelBuilder.Entity("LocationVoitureApi.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateDeb")
                        .HasColumnType("date")
                        .HasColumnName("date_deb");

                    b.Property<DateTime?>("DateFin")
                        .HasColumnType("date")
                        .HasColumnName("date_fin");

                    b.Property<int>("IdClient")
                        .HasColumnType("integer")
                        .HasColumnName("idClient");

                    b.Property<int>("Idemployeur")
                        .HasColumnType("integer")
                        .HasColumnName("idemployeur");

                    b.Property<string>("VoitureMatricule")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("voiture_matricule");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdClient" }, "fk_location_Client1_idx");

                    b.HasIndex(new[] { "Idemployeur" }, "fk_location_employeur1_idx");

                    b.HasIndex(new[] { "VoitureMatricule" }, "fk_location_voiture1_idx");

                    b.ToTable("location", "mydb");
                });

            modelBuilder.Entity("LocationVoitureApi.Models.Marque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("nom");

                    b.HasKey("Id");

                    b.ToTable("marque", "mydb");
                });

            modelBuilder.Entity("LocationVoitureApi.Models.Voiture", b =>
                {
                    b.Property<string>("Matricule")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("matricule");

                    b.Property<int>("Idmarque")
                        .HasColumnType("integer")
                        .HasColumnName("idmarque");

                    b.Property<string>("Modele")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("modele");

                    b.Property<string>("Photo")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("photo");

                    b.Property<int?>("Poids")
                        .HasColumnType("integer")
                        .HasColumnName("poids");

                    b.Property<decimal?>("Prix")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("prix");

                    b.Property<string>("Type")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("type");

                    b.HasKey("Matricule");

                    b.HasIndex(new[] { "Idmarque" }, "fk_voiture_marque_idx");

                    b.ToTable("voiture", "mydb");
                });

            modelBuilder.Entity("LocationVoitureApi.Models.Employer", b =>
                {
                    b.HasOne("LocationVoitureApi.Models.Agence", "IdagenceNavigation")
                        .WithMany("Employeurs")
                        .HasForeignKey("Idagence")
                        .IsRequired()
                        .HasConstraintName("employeur$fk_employeur_agence1");

                    b.Navigation("IdagenceNavigation");
                });

            modelBuilder.Entity("LocationVoitureApi.Models.Location", b =>
                {
                    b.HasOne("LocationVoitureApi.Models.Client", "IdClientNavigation")
                        .WithMany("Locations")
                        .HasForeignKey("IdClient")
                        .IsRequired()
                        .HasConstraintName("location$fk_location_Client1");

                    b.HasOne("LocationVoitureApi.Models.Employer", "IdemployeurNavigation")
                        .WithMany("Locations")
                        .HasForeignKey("Idemployeur")
                        .IsRequired()
                        .HasConstraintName("FK_location_employeur");

                    b.HasOne("LocationVoitureApi.Models.Voiture", "VoitureMatriculeNavigation")
                        .WithMany("Locations")
                        .HasForeignKey("VoitureMatricule")
                        .IsRequired()
                        .HasConstraintName("FK_location_voiture");

                    b.Navigation("IdClientNavigation");

                    b.Navigation("IdemployeurNavigation");

                    b.Navigation("VoitureMatriculeNavigation");
                });

            modelBuilder.Entity("LocationVoitureApi.Models.Voiture", b =>
                {
                    b.HasOne("LocationVoitureApi.Models.Marque", "marque")
                        .WithMany("Voitures")
                        .HasForeignKey("Idmarque")
                        .IsRequired()
                        .HasConstraintName("FK_voiture_marque");

                    b.Navigation("marque");
                });

            modelBuilder.Entity("LocationVoitureApi.Models.Agence", b =>
                {
                    b.Navigation("Employeurs");
                });

            modelBuilder.Entity("LocationVoitureApi.Models.Client", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("LocationVoitureApi.Models.Employer", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("LocationVoitureApi.Models.Marque", b =>
                {
                    b.Navigation("Voitures");
                });

            modelBuilder.Entity("LocationVoitureApi.Models.Voiture", b =>
                {
                    b.Navigation("Locations");
                });
#pragma warning restore 612, 618
        }
    }
}
